# Feature elimination

n_features_to_select = 10
n_features=Xdf.shape[1]

if n_features_to_select is None:
    n_features_to_select = n_features // 2
else:
    n_features_to_select = n_features_to_select

#

support_ = np.ones(n_features, dtype=np.bool)
ranking_ = np.ones(n_features, dtype=np.int)

model=LinearRegression()
model.fit(X_train,y_train)
y_pred = model.predict(X_test)
baseline_score = dmc_error(y_pred, y_test)
scores_ = []

for col_number in range(X_train.shape[1] ):
    
    # Remaining features
    features_ = np.arange(n_features)[support_]
    features = list( set(features_)-set([col_number]) )
    
    print features

    # Rank the remaining features
    estimator = LinearRegression()

    estimator.fit(X_train[:, features], y_train)
    y_pred=estimator.predict(X_test[:, features])
    current_score= dmc_error(y_test, y_pred)

    scores_.append(current_score)
    print 'tes'
